const { firstChoices } = require("./extends/realms/choices");
const { rowBuilder } = require("./shared/helpers");
const {EmbedBuilder, ActionRowBuilder, ButtonBuilder} = require("discord.js");
const result = require('./extends/realms/responses')
const CUSTOM_ID = {
  FIRST_CHOICE: "firstChoice",
  SECOND_CHOICE: "secondChoice",
  THIRD_CHOICE: "thirdChoice",
  BACK: "back",
};

const userChoices = new Map();
module.exports = async (interaction, ephemeral) => {
  const row = rowBuilder(CUSTOM_ID.FIRST_CHOICE, firstChoices, "Choose a Realm", false);
  const reply = await interaction.reply({
    content: "Please Select a Realm",
    components: [row],
    fetchReply: true,
  });
  const filter = (i) => {
    if (i.user.id !== interaction.user.id) {
      i.reply({
        content: `You can't use the menu generated by others. Run the command </${interaction.commandName}:${interaction.commandId}> if you wish to use it.`,
        ephemeral: true,
      });
      return false;
    }
    return true;
  };
  const collector = reply.createMessageComponentCollector({
    filter,
    idle: 2 * 60 * 1000,
  });

  collector.on("collect", async (int) => {
    const value = int.values[0];
    const id = int.customId;
    switch (id) {
      case CUSTOM_ID.FIRST_CHOICE:
        handleFirst(int, value);
        break;
      case CUSTOM_ID.SECOND_CHOICE:
        handleSecond(int, value, ephemeral);
        break;
      default:
        int.reply("Invalid choice selected.");
    }
  });

  collector.on("end", async () => {
    row.components.forEach((component) => component.setDisabled(true).setPlaceholder('Menu Expired'));
    await reply.edit({
      components: [row],
    });
  });
};

async function handleFirst(interaction, value) {
  userChoices.set(interaction.message.id, {
    firstChoice: {
      label: firstChoices.find((choice) => choice.value === value).label,
      value: value,
    },
  });
  const options = [
    {
      label: "Realm Summary",
      value: "summary_" + value,
    },
    {
      label: "Spirits",
      value: "spirits_" + value,
    },
  ];
  const map = userChoices.get(interaction.message.id);
  const placeholder = map.firstChoice.label;
  const row = rowBuilder(CUSTOM_ID.SECOND_CHOICE, options, placeholder, true);
  await interaction.update({
    content: `Guides for __${placeholder}__`,
    components: [row],
  });
}

async function handleSecond(interaction, value, ephemeral) {
  if (value.startsWith("summary_")) {
    await respondSummary(interaction, value, ephemeral);
  } else if (value.startsWith("spirits_")) {
    await respondSpirits(interaction, value, ephemeral);
  }
}

async function respondSummary(int, value, ephemeral) {
  const data = result.getSummary(value);
  let page = 1;
  const total = data.embeds.length - 1;
  const getData = () => {
    const embed = data.embeds[page - 1 ];
     const emb = new EmbedBuilder()
    .setTitle(embed.title)
    .setDescription(embed.description)
    .setImage(embed.image)
    .setAuthor({ name: `Different Areas of ${userChoices.get(int.message.id).firstChoice.label}`})
    .setFooter({text: `Page ${page}/${total + 1}`})

    const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
        .setCustomId("back")
        .setLabel("Previous")
        .setDisabled(page - 1 === 0)
        .setStyle('2'),
        new ButtonBuilder()
        .setCustomId("forward")
        .setLabel("Next")
        .setDisabled(page - 1 === total)
        .setStyle('2')
    )

    return {emb, row}
  }
  const {emb, row} = getData()
  const reply = await int.reply({
    content: data.content,
    embeds: [emb],
    components: [row],
    fetchReply: true,
  })

  const collector = reply.createMessageComponentCollector({
    filter: (i) => i.user.id === int.user.id,
    idle: 2 * 60 * 1000,
  });

  collector.on("collect", async (inter) => {
    if (inter.customId === "back") {
      page--;
      const get = getData()
      await inter.update({
        embeds: [get.emb],
        components: [get.row]
      })
    } else if (inter.customId === "forward") {
      page++;     
      const get = getData()
      await inter.update({
        embeds: [get.emb],
        components: [get.row]
      })
    }
  })
}
