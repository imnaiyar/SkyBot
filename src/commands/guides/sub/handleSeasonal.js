const { ActionRowBuilder, StringSelectMenuBuilder } = require("discord.js");
const { firstChoices, secondChoices, thirdChoices } = require("./extends/seasonal/SeasonalChoices.js");
const responses = require("./extends/seasonal/GuideResponse.js");
const { rowBuilder, respond } = require("./shared/helpers.js");
const CUSTOM_ID = {
  FIRST_CHOICE: "firstChoice",
  SECOND_CHOICE: "secondChoice",
  THIRD_CHOICE: "thirdChoice",
  BACK: "back",
};

const messageChoices = new Map();
module.exports = async (interaction, ephemeral) => {
  const filter = (i) => {
    if (i.user.id !== interaction.user.id) {
      i.reply({
        content:
          "You can't use the menu generated by others. Run the command </seasonal-guides:1147244751708491897> if you wish to use it.",
        ephemeral: true,
      });
      return false;
    }
    return true;
  };

  const row = rowBuilder(CUSTOM_ID.FIRST_CHOICE, firstChoices, "Choose a Season", false);

  const reply = await interaction.reply({
    content: "Please select a season:",
    components: [row],
    fetchReply: true,
  });

  const collector = reply.createMessageComponentCollector({
    filter,
    idle: 2 * 60 * 1000,
  });

  collector.on("collect", async (selectInteraction) => {
    const selectedChoice = selectInteraction.values[0];
    if (selectedChoice === "back") {
      await handleBack(selectInteraction);
      return;
    }
    switch (selectInteraction.customId) {
      case CUSTOM_ID.FIRST_CHOICE:
        await handleFirst(selectInteraction, selectedChoice, ephemeral);
        break;
      case CUSTOM_ID.SECOND_CHOICE:
        await handleSecond(selectInteraction, selectedChoice, ephemeral);
        break;
      case CUSTOM_ID.THIRD_CHOICE:
        await respond(selectInteraction, responses, selectedChoice, ephemeral);
        break;
      default:
        selectInteraction.reply("Invalid choice selected.");
    }
  });

  collector.on("end", (collected, reason) => {
    const disabledRow = new ActionRowBuilder().addComponents(
      new StringSelectMenuBuilder()
        .setCustomId("expired")
        .addOptions(firstChoices)
        .setPlaceholder("Menu Expired")
        .setDisabled(true)
    );
    interaction.editReply({
      components: [disabledRow],
    });
  });
};
const getEmoji = (label) => {
  switch (label) {
    case "Seasonal Quests":
      return "<:quests:1131171487877963886>";
    case "Spirit Locations":
      return "<:location:1131173266883612722>";
    case "Spirits Tree":
      return "<:tree:1131279758907424870>";
    case "Seasonal Price Tree":
      return "<:tree:1131279758907424870>";
    default:
      return "";
  }
};
async function handleFirst(int, value, ephemeral) {
  messageChoices.set(int.message.id, {
    firstChoice: {
      value: value,
      label: firstChoices.find((choice) => choice.value === value).label,
    },
  });

  const choices = secondChoices[value]?.map((choice) => ({
    ...choice,
    emoji: getEmoji(choice.label),
  }));

  if (!choices) {
    await respond(int, responses, value, ephemeral);
    return;
  }

  const map = messageChoices.get(int.message.id);
  const placeholder = map.firstChoice.label;
  const row = rowBuilder(CUSTOM_ID.SECOND_CHOICE, choices, placeholder, true);
  await int.update({
    content: `Guides for ${placeholder}`,
    components: [row],
  });
}

async function handleSecond(int, value, ephemeral) {
  messageChoices.set(int.message.id, {
    ...messageChoices.get(int.message.id),
    secondChoice: {
      value: value,
      label: secondChoices[messageChoices.get(int.message.id).firstChoice.value].find(
        (choice) => choice.value === value
      ).label,
    },
  });

  const map = messageChoices.get(int.message.id);
  const choices = thirdChoices[value];

  if (!choices) {
    await respond(int, responses, value, ephemeral);
    return;
  }

  const placeholder = `${map.firstChoice.label} - ${map.secondChoice.label}`;
  const row = rowBuilder(CUSTOM_ID.THIRD_CHOICE, choices, placeholder, true);
  await int.update({
    content: `${map.secondChoice.label} of __${map.firstChoice.label}__`,
    components: [row],
  });
}

async function handleBack(int) {
  const map = messageChoices.get(int.message.id);
  if (int.customId === CUSTOM_ID.SECOND_CHOICE) {
    const row = rowBuilder(CUSTOM_ID.FIRST_CHOICE, firstChoices, "Choose a Season", false);
    await int.update({
      content: "Please select a season:",
      components: [row],
    });
    messageChoices.delete(int.message.id);
  } else if (int.customId === CUSTOM_ID.THIRD_CHOICE) {
    const row = rowBuilder(
      CUSTOM_ID.SECOND_CHOICE,
      secondChoices[map.firstChoice.value].map((choice) => ({
        ...choice,
        emoji: getEmoji(choice.label),
      })),
      map.firstChoice.label,
      true
    );
    await int.update({
      content: `Guides for ${map.firstChoice.label}`,
      components: [row],
    });
    delete map.secondChoice;
  }
}
