name: Deploy

on:
  push:
    branches: [main]
    paths:
      - "packages/skyhelper/src/**"
      - "packages/skyhelper/package.json"
      - "packages/jobs/src/**"
      - "packages/jobs/package.json"
  workflow_dispatch:
    inputs:
      to_deploy:
        description: "Specify the package to deploy"
        required: true
        type: choice
        options:
          - "skyhelper"
          - "jobs"
          - "both"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      target: ${{ steps.set_target.outputs.target }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            skyhelper:
              - 'packages/skyhelper/**'
            jobs:
              - 'packages/jobs/**'

      - name: Set target for deployment
        id: set_target
        run: |
          # If it's a workflow_dispatch event, set the target from the input.
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Deploy target set from workflow_dispatch input."
            echo "::set-output name=target::${{ github.event.inputs.to_deploy }}"
          # If both skyhelper and jobs changed, deploy both.
          elif [[ "${{ steps.filter.outputs.skyhelper }}" == "true" && "${{ steps.filter.outputs.jobs }}" == "true" ]]; then
            echo "Both packages changed, deploying both."
            echo "::set-output name=target::both"
          # If only skyhelper changed, deploy skyhelper.
          elif [[ "${{ steps.filter.outputs.skyhelper }}" == "true" ]]; then
            echo "Skyhelper package changed, deploying skyhelper."
            echo "::set-output name=target::skyhelper"
          # If only jobs changed, deploy jobs.
          elif [[ "${{ steps.filter.outputs.jobs }}" == "true" ]]; then
            echo "Jobs package changed, deploying jobs."
            echo "::set-output name=target::jobs"
          fi

  deploy:
    needs: changes
    runs-on: self-hosted
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Deploy selected package
        run: |
          echo "Deploying ${{ needs.changes.outputs.target }}..."
          if [[ "${{ needs.changes.outputs.target }}" == "both" ]]; then
            docker compose up -d --build
          else
            docker compose up -d --build ${{ needs.changes.outputs.target }}
          fi
        env:
          TOKEN: ${{ secrets.TOKEN }}
          NODE_ENV: "production"
          NODE_OPTIONS: "--enable-source-maps --import ./scripts/register-loader.mjs"
          MONGO_CONNECTION: ${{secrets.MONGO_CONNECTION}}
          CLIENT_ID: ${{secrets.CLIENT_ID}}
          SENTRY_DSN: ${{secrets.SENTRY_DSN}}
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
          PUBLIC_KEY: ${{secrets.PUBLIC_KEY}}
          DBL_TOKEN: ${{secrets.DBL_TOKEN}}
          BUG_REPORTS: ${{secrets.BUG_REPORTS}}
          COMMANDS_USED: ${{secrets.COMMANDS_USED}}
          CONTACT_US: ${{secrets.COMMANDS_USED}}
          ERROR_LOGS: ${{secrets.ERROR_LOGS}}
          GUILD: ${{secrets.GUILD}}
          READY_LOGS: ${{secrets.READY_LOGS}}
          SUGGESTION: ${{secrets.SUGGESTION}}
          TOPGG_TOKEN: ${{secrets.TOPGG_TOKEN}}
          ERROR_WEBHOOK: $${{secrets.ERROR_LOGS}}

      - name: Cleanup Unused Images
        run: docker image prune -f
