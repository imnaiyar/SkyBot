name: Deploy

on:
  push:
    branches: [main]
    paths:
      - "packages/skyhelper/src/**"
      - "packages/skyhelper/package.json"
      - "packages/jobs/src/**"
      - "packages/jobs/package.json"
  workflow_dispatch:
    inputs:
      to_deploy:
        description: "Specify the package to deploy"
        required: true
        type: choice
        options:
          - "skyhelper"
          - "jobs"
          - "both"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      skyhelper: ${{ steps.filter.outputs.skyhelper }}
      jobs: ${{ steps.filter.outputs.jobs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            skyhelper:
              - 'packages/skyhelper/**'
            jobs:
              - 'packages/skyhelper-jobs/**'
  deploy_skyhelper:
    needs: changes
    if: needs.changes.outputs.skyhelper == 'true' || github.event_name == 'workflow_dispatch' && contains(fromJSON('["skyhelper", "both"]'), github.event.inputs.to_deploy)
    runs-on: self-hosted
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Deploy SkyHelper Bot
        run: cd packages/skyhelper && docker compose up -d --build
        env:
          TOKEN: ${{ secrets.TOKEN }}
          NODE_ENV: production
          NODE_OPTIONS: --enable-source-maps
          MONGO_CONNECTION: ${{secrets.MONGO_CONNECTION}}
          CLIENT_ID: ${{secrets.CLIENT_ID}}
          SENTRY_DSN: ${{secrets.SENTRY_DSN}}
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
          SENTRY_RELEASE: skyhelper@${{ github.sha }}
          PUBLIC_KEY: ${{secrets.PUBLIC_KEY}}
          DBL_TOKEN: ${{secrets.DBL_TOKEN}}
          BUG_REPORTS: ${{secrets.BUG_REPORTS}}
          COMMANDS_USED: ${{secrets.COMMANDS_USED}}
          CONTACT_US: ${{secrets.COMMANDS_USED}}
          ERROR_LOGS: ${{secrets.ERROR_LOGS}}
          GUILD: ${{secrets.GUILD}}
          READY_LOGS: ${{secrets.READY_LOGS}}
          SUGGESTION: ${{secrets.SUGGESTION}}
          TOPGG_TOKEN: ${{secrets.TOPGG_TOKEN}}

      - name: Cleanup Unused Images
        run: docker image prune -f

  deploy_skyhelper_jobs:
    needs: changes
    if: needs.changes.outputs.jobs == 'true' || github.event_name == 'workflow_dispatch' && contains(fromJSON('["jobs", "both"]'), github.event.inputs.to_deploy)
    runs-on: self-hosted
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Deploy SkyHelper Jobs
        run: cd packages/jobs && docker compose up -d --build
        env:
          TOKEN: ${{ secrets.TOKEN }}
          MONGO_CONNECTION: ${{secrets.MONGO_CONNECTION}}
          ERROR_WEBHOOK: $${{secrets.ERROR_LOGS}}
          NODE_ENV: production

      - name: Cleanup Unused Images
        run: docker image prune -f
